{"ast":null,"code":"// src/api/auth.js\n// Importa a constante da URL base da API\nimport API_BASE_URL from'../config';// Função para login\nexport const login=async credentials=>{try{const response=await fetch(`${API_BASE_URL}/login`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(credentials)});if(!response.ok){throw new Error(`Login failed: ${response.statusText}`);}return await response.json();}catch(error){console.error('Error during login:',error);throw error;}};// Função para registro\nexport const register=async userData=>{try{const response=await fetch(`${API_BASE_URL}/register`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(userData)});if(!response.ok){throw new Error(`Registration failed: ${response.statusText}`);}return await response.json();}catch(error){console.error('Error during registration:',error);throw error;}};","map":{"version":3,"names":["API_BASE_URL","login","credentials","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","json","error","console","register","userData"],"sources":["/home/ec2-user/techcaverna-frontend/src/api/auth.js"],"sourcesContent":["// src/api/auth.js\n\n// Importa a constante da URL base da API\nimport API_BASE_URL from '../config';\n\n// Função para login\nexport const login = async (credentials) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(credentials),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Login failed: ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error during login:', error);\n    throw error;\n  }\n};\n\n// Função para registro\nexport const register = async (userData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(userData),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Registration failed: ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error during registration:', error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA;AAEA;AACA,MAAO,CAAAA,YAAY,KAAM,WAAW,CAEpC;AACA,MAAO,MAAM,CAAAC,KAAK,CAAG,KAAO,CAAAC,WAAW,EAAK,CAC1C,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGJ,YAAY,QAAQ,CAAE,CACpDK,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACP,WAAW,CAClC,CAAC,CAAC,CAEF,GAAI,CAACC,QAAQ,CAACO,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,iBAAiBR,QAAQ,CAACS,UAAU,EAAE,CAAC,CACzD,CAEA,MAAO,MAAM,CAAAT,QAAQ,CAACU,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC3C,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,QAAQ,CAAG,KAAO,CAAAC,QAAQ,EAAK,CAC1C,GAAI,CACF,KAAM,CAAAd,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGJ,YAAY,WAAW,CAAE,CACvDK,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACQ,QAAQ,CAC/B,CAAC,CAAC,CAEF,GAAI,CAACd,QAAQ,CAACO,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,wBAAwBR,QAAQ,CAACS,UAAU,EAAE,CAAC,CAChE,CAEA,MAAO,MAAM,CAAAT,QAAQ,CAACU,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CAClD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}