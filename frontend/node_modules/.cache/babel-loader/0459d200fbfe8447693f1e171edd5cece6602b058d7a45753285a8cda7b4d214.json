{"ast":null,"code":"import api from'./axios-config';// Importa a configuração centralizada do Axios\nexport const loginUser=async(username,password)=>{try{const response=await api.post('/login',{username,password});const{access_token,user}=response.data;// Salva o token no localStorage para uso futuro\nlocalStorage.setItem('token',access_token);return user;// Retorna os dados do usuário\n}catch(error){var _error$response,_error$response$data;const message=((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Erro ao fazer login';throw new Error(message);}};export const registerUser=async(username,password,confirmPassword)=>{try{const response=await api.post('/register',{username,password,confirm_password:confirmPassword});return response.data;// Retorna a resposta do registro\n}catch(error){var _error$response2,_error$response2$data;const message=((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Erro ao registrar';throw new Error(message);}};export const logoutUser=()=>{// Remove o token do localStorage\nlocalStorage.removeItem('token');};","map":{"version":3,"names":["api","loginUser","username","password","response","post","access_token","user","data","localStorage","setItem","error","_error$response","_error$response$data","message","Error","registerUser","confirmPassword","confirm_password","_error$response2","_error$response2$data","logoutUser","removeItem"],"sources":["/home/ec2-user/techcaverna-frontend/src/api/auth.js"],"sourcesContent":["import api from './axios-config'; // Importa a configuração centralizada do Axios\n\nexport const loginUser = async (username, password) => {\n  try {\n    const response = await api.post('/login', { username, password });\n    const { access_token, user } = response.data;\n\n    // Salva o token no localStorage para uso futuro\n    localStorage.setItem('token', access_token);\n\n    return user; // Retorna os dados do usuário\n  } catch (error) {\n    const message = error.response?.data?.message || 'Erro ao fazer login';\n    throw new Error(message);\n  }\n};\n\nexport const registerUser = async (username, password, confirmPassword) => {\n  try {\n    const response = await api.post('/register', {\n      username,\n      password,\n      confirm_password: confirmPassword,\n    });\n\n    return response.data; // Retorna a resposta do registro\n  } catch (error) {\n    const message = error.response?.data?.message || 'Erro ao registrar';\n    throw new Error(message);\n  }\n};\n\nexport const logoutUser = () => {\n  // Remove o token do localStorage\n  localStorage.removeItem('token');\n};\n"],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,gBAAgB,CAAE;AAElC,MAAO,MAAM,CAAAC,SAAS,CAAG,KAAAA,CAAOC,QAAQ,CAAEC,QAAQ,GAAK,CACrD,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACK,IAAI,CAAC,QAAQ,CAAE,CAAEH,QAAQ,CAAEC,QAAS,CAAC,CAAC,CACjE,KAAM,CAAEG,YAAY,CAAEC,IAAK,CAAC,CAAGH,QAAQ,CAACI,IAAI,CAE5C;AACAC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAEJ,YAAY,CAAC,CAE3C,MAAO,CAAAC,IAAI,CAAE;AACf,CAAE,MAAOI,KAAK,CAAE,KAAAC,eAAA,CAAAC,oBAAA,CACd,KAAM,CAAAC,OAAO,CAAG,EAAAF,eAAA,CAAAD,KAAK,CAACP,QAAQ,UAAAQ,eAAA,kBAAAC,oBAAA,CAAdD,eAAA,CAAgBJ,IAAI,UAAAK,oBAAA,iBAApBA,oBAAA,CAAsBC,OAAO,GAAI,qBAAqB,CACtE,KAAM,IAAI,CAAAC,KAAK,CAACD,OAAO,CAAC,CAC1B,CACF,CAAC,CAED,MAAO,MAAM,CAAAE,YAAY,CAAG,KAAAA,CAAOd,QAAQ,CAAEC,QAAQ,CAAEc,eAAe,GAAK,CACzE,GAAI,CACF,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAJ,GAAG,CAACK,IAAI,CAAC,WAAW,CAAE,CAC3CH,QAAQ,CACRC,QAAQ,CACRe,gBAAgB,CAAED,eACpB,CAAC,CAAC,CAEF,MAAO,CAAAb,QAAQ,CAACI,IAAI,CAAE;AACxB,CAAE,MAAOG,KAAK,CAAE,KAAAQ,gBAAA,CAAAC,qBAAA,CACd,KAAM,CAAAN,OAAO,CAAG,EAAAK,gBAAA,CAAAR,KAAK,CAACP,QAAQ,UAAAe,gBAAA,kBAAAC,qBAAA,CAAdD,gBAAA,CAAgBX,IAAI,UAAAY,qBAAA,iBAApBA,qBAAA,CAAsBN,OAAO,GAAI,mBAAmB,CACpE,KAAM,IAAI,CAAAC,KAAK,CAACD,OAAO,CAAC,CAC1B,CACF,CAAC,CAED,MAAO,MAAM,CAAAO,UAAU,CAAGA,CAAA,GAAM,CAC9B;AACAZ,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC,CAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}